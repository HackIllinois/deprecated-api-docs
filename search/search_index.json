{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home HackIllinois API Documentation v0.0.1 Welcome to the HackIllinois API documentation. If you would like to contribute, please see the Getting Started guide. For our endpoints, please visit our technical reference .","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#hackillinois-api-documentation-v001","text":"Welcome to the HackIllinois API documentation. If you would like to contribute, please see the Getting Started guide. For our endpoints, please visit our technical reference .","title":"HackIllinois API Documentation v0.0.1"},{"location":"about/License/","text":"University of Illinois/NCSA Open Source License Copyright (c) 2018 HackIllinois All rights reserved. Developed by: HackIllinois Systems HackIllinois https://hackillinois.org Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution. * Neither the names of the HackIllinois Systems team, HackIllinois, nor the names of its contributors may be used to endorse or promote products derived from this Software without specific prior written permission. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.","title":"License"},{"location":"about/License/#university-of-illinoisncsa-open-source-license","text":"Copyright (c) 2018 HackIllinois All rights reserved.","title":"University of Illinois/NCSA Open Source License"},{"location":"about/License/#developed-by","text":"HackIllinois Systems HackIllinois https://hackillinois.org Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution. * Neither the names of the HackIllinois Systems team, HackIllinois, nor the names of its contributors may be used to endorse or promote products derived from this Software without specific prior written permission. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.","title":"Developed by:"},{"location":"getting-started/deployment-guide/","text":"Deployment Setup External Dependencies OAuth 2.0 Providers Setup OAuth application on any of the supported providers which you intend to use. Supported providers are GitHub, Google, and LinkedIn. Generate keypairs for each oauth application you setup. MongoDB Cluster Setup a MongoDB cluster on Mongo Atlas. The free M0 tier will be sufficient for development and small deployments. Setup a user for the microservices which has read and write permissions. By default all IP addresses are not allowed to connect to the cluster. You will want to whitelist and IP addresses which you will be manually connecting from. Additionally you should setup VPC peering to your API's VPC or whitelist the IP address of the NAT in your API's VPC. If you are on the M0 or other small tiers then you can not enable VPC peering and will need to whitelist the NAT's IP. Sparkpost Setup an account with Sparkpost. You will also need to write / import all of the templates which the API attempts to send. Generate an Sparkpost API key for the API to use. AWS Services If you are running the API on AWS then you should attach an IAM role to your API containers / services which will give the API access to the required AWS resources. If you are running the API outside of AWS, you should generate an AWS API keypair which can be loaded into the API. S3 Setup an S3 bucket for uploads. The API will store resumes in this bucket and return presigned URLs to API consumers. SNS Setup an SNS application. You will need to generate certificates and keys for your iOS and Android mobile applications and load then into the SNS application. The API will send push notifications to iOS and Android devices via SNS using the ARN's generated during this setup. Setup Cloud Infrastructure It is highly recommended that you use AWS to host your production deployment. However it should be possible to run the API elsewhere. You will need an S3 compatible storage service (Digital Ocean Spaces is a potential alternative) if you want to store resumes. And you will need AWS SNS, if you want to send push notifications. However the API can be run without either of these services. AWS Setup Create an AWS account. Start by creating a VPC with 4 subnets. 2 subnets should be public and 2 subnets should be private. Deploy a NAT with an Elastic IP into the VPC which will allow microservices to connect to external websites, without being exposed to the public internet. Deploy an Elastic Load Balancer which does SSL termination and forwards traffic to the ECS cluster. You will need to load the SSL certificate into the load balancer. Deploy a ECS cluster into the private subnets. The security group for this cluster should allow incoming and outgoing tcp connections with the subnet on ports 8000-8050 and on port 80 / 443. Once the ECS cluster is setup, then you can create task definitions for each microservice. The task definitions should use the API container on DockerHub and specify the service name in the command for the container. The HI_CONFIG environment variable should point to the location of the configuration json file. Additionally any secret configuration variables should be loaded via environment variables. Start a ECS service on the cluster for each microservice. When setting up the ECS services you will need to create AWS Route 53 DNS routes. You will first need to create an AWS 53 DNS Zone to put these routes into. Lastly when setting up the gateway you will need to attach the load balancer you created to the gateway. DNS Setup You should already have an account with a DNS provider which is used for managing your website. Create an A record to setup a url which will resolve to the IP address of the load balancer for the API. Writing the Configuration File Start with the provided example configuration json file and modify it as needed to satisfy your requirements. The urls for each service will depend on the dns routes that you setup when deploying the API. Any not secret configuration variables in the file should also be setup. For a full list of all required variables you can look at the example development configuration file. The definitions for registration and rsvp and the fields you will most likely need to configure. Any variable can be overwritten by setting an environment variable with the same key. You should use environment variables to load secret configuration variables.","title":"Deployment Guide"},{"location":"getting-started/deployment-guide/#deployment","text":"","title":"Deployment"},{"location":"getting-started/deployment-guide/#setup-external-dependencies","text":"","title":"Setup External Dependencies"},{"location":"getting-started/deployment-guide/#oauth-20-providers","text":"Setup OAuth application on any of the supported providers which you intend to use. Supported providers are GitHub, Google, and LinkedIn. Generate keypairs for each oauth application you setup.","title":"OAuth 2.0 Providers"},{"location":"getting-started/deployment-guide/#mongodb-cluster","text":"Setup a MongoDB cluster on Mongo Atlas. The free M0 tier will be sufficient for development and small deployments. Setup a user for the microservices which has read and write permissions. By default all IP addresses are not allowed to connect to the cluster. You will want to whitelist and IP addresses which you will be manually connecting from. Additionally you should setup VPC peering to your API's VPC or whitelist the IP address of the NAT in your API's VPC. If you are on the M0 or other small tiers then you can not enable VPC peering and will need to whitelist the NAT's IP.","title":"MongoDB Cluster"},{"location":"getting-started/deployment-guide/#sparkpost","text":"Setup an account with Sparkpost. You will also need to write / import all of the templates which the API attempts to send. Generate an Sparkpost API key for the API to use.","title":"Sparkpost"},{"location":"getting-started/deployment-guide/#aws-services","text":"If you are running the API on AWS then you should attach an IAM role to your API containers / services which will give the API access to the required AWS resources. If you are running the API outside of AWS, you should generate an AWS API keypair which can be loaded into the API.","title":"AWS Services"},{"location":"getting-started/deployment-guide/#s3","text":"Setup an S3 bucket for uploads. The API will store resumes in this bucket and return presigned URLs to API consumers.","title":"S3"},{"location":"getting-started/deployment-guide/#sns","text":"Setup an SNS application. You will need to generate certificates and keys for your iOS and Android mobile applications and load then into the SNS application. The API will send push notifications to iOS and Android devices via SNS using the ARN's generated during this setup.","title":"SNS"},{"location":"getting-started/deployment-guide/#setup-cloud-infrastructure","text":"It is highly recommended that you use AWS to host your production deployment. However it should be possible to run the API elsewhere. You will need an S3 compatible storage service (Digital Ocean Spaces is a potential alternative) if you want to store resumes. And you will need AWS SNS, if you want to send push notifications. However the API can be run without either of these services.","title":"Setup Cloud Infrastructure"},{"location":"getting-started/deployment-guide/#aws-setup","text":"Create an AWS account. Start by creating a VPC with 4 subnets. 2 subnets should be public and 2 subnets should be private. Deploy a NAT with an Elastic IP into the VPC which will allow microservices to connect to external websites, without being exposed to the public internet. Deploy an Elastic Load Balancer which does SSL termination and forwards traffic to the ECS cluster. You will need to load the SSL certificate into the load balancer. Deploy a ECS cluster into the private subnets. The security group for this cluster should allow incoming and outgoing tcp connections with the subnet on ports 8000-8050 and on port 80 / 443. Once the ECS cluster is setup, then you can create task definitions for each microservice. The task definitions should use the API container on DockerHub and specify the service name in the command for the container. The HI_CONFIG environment variable should point to the location of the configuration json file. Additionally any secret configuration variables should be loaded via environment variables. Start a ECS service on the cluster for each microservice. When setting up the ECS services you will need to create AWS Route 53 DNS routes. You will first need to create an AWS 53 DNS Zone to put these routes into. Lastly when setting up the gateway you will need to attach the load balancer you created to the gateway.","title":"AWS Setup"},{"location":"getting-started/deployment-guide/#dns-setup","text":"You should already have an account with a DNS provider which is used for managing your website. Create an A record to setup a url which will resolve to the IP address of the load balancer for the API.","title":"DNS Setup"},{"location":"getting-started/deployment-guide/#writing-the-configuration-file","text":"Start with the provided example configuration json file and modify it as needed to satisfy your requirements. The urls for each service will depend on the dns routes that you setup when deploying the API. Any not secret configuration variables in the file should also be setup. For a full list of all required variables you can look at the example development configuration file. The definitions for registration and rsvp and the fields you will most likely need to configure. Any variable can be overwritten by setting an environment variable with the same key. You should use environment variables to load secret configuration variables.","title":"Writing the Configuration File"},{"location":"getting-started/developer-guide/","text":"HackIllinois API This repository contains the code which runs the backend services supporting HackIllinois. Developer Environment Setup Building, Testing, and Running the API Release Deployment Contributing Documentation Developer Environment Setup In order to work on the API there are a few setups neccessary in order to setup your developer environemnt. Installing Dependencies We highly reccommend that you use Ubuntu 18.04 when working on API development. The API is written and Go and makes use of MongoDB for storing data. You will have to install both of these before working on the API. You will also need a few common development tools including make and git . Installing Development Tools Both make and git can be installed from the default ubuntu package repositories. Run the following commands to install both tools. You may need to run the commands under sudo . apt-get update apt-get install build-essential git Installing Go Follow the Go Installation Instructions for installing Go. Run go version to ensure that Go has been properly installed. Installing MongoDB Follow the MongoDB Installation Instructions for installing MongoDB. Once MongoDB is installed ensure mongod is running. If it is not running then start the service. Downloading the API source and dependencies Run the following command to retrieve the API and all it's dependencies. The API source will be cloned to a folder called api in your current directory. git clone https://github.com/HackIllinois/api.git First time API setup After downloading the API source code you will want to build the entire repository and generate an Admin token for testing endpoints. This can be done by moving into the API folder and running: make setup You should see your Admin token near the bottom of the output. If this process hangs, ensure that mongod is running. This Admin JWT should be passed as the Authorization header when making a request via curl , Postman , or a similar tool. Useful tools for development There are a couple other useful but not necessary tools for working on the API. The first is a GUI tool for viewing and modifying the database. There are many options including MongoDB Compass and Robo 3T . You will also want to install Postman for making requests to the API when testing. Building, Testing, and Running the API In order to simply API development make is used for building, testing, and running the API. All make commands can be run from the root of the repository and they will properly find and operate on all of the services. Building the API Run the following command from the root of the repository. The gateway and all services will be built into bin . make all Testing the API Run the following command from the root of the repository. The gateway and all services will have their tests run and any errors will be reported. make test Running the API Run the following command from the root of the repository. Note that this command will not rebuild the API so you must first build the API to ensure your binaries are up to date. make run API Container There are also make targets provided for building a containerized version of the API for usage in production deployments. Building the API Container Building a container requires that docker and go have already been installed. The following command should be run from the root of the api repository. make container Running the API Container You can obtain all released versions and the latest version of the container from DockerHub . The API container takes the name of the service to run as it's command arguement in the following docker run command. Ensure that the correct environment variables are set to load the configuration file and overwrite any secret configuration variables. docker run -d --env-file env.config hackillinois/api:latest <servicename> Contributing For contributing guidelines see the CONTRIBUTING.md file in the repository root. Documentation We use MkDocs for our documentation, and host at HackIllinois Docs .","title":"Developer Guide"},{"location":"getting-started/developer-guide/#hackillinois-api","text":"This repository contains the code which runs the backend services supporting HackIllinois. Developer Environment Setup Building, Testing, and Running the API Release Deployment Contributing Documentation","title":"HackIllinois API"},{"location":"getting-started/developer-guide/#developer-environment-setup","text":"In order to work on the API there are a few setups neccessary in order to setup your developer environemnt.","title":"Developer Environment Setup"},{"location":"getting-started/developer-guide/#installing-dependencies","text":"We highly reccommend that you use Ubuntu 18.04 when working on API development. The API is written and Go and makes use of MongoDB for storing data. You will have to install both of these before working on the API. You will also need a few common development tools including make and git .","title":"Installing Dependencies"},{"location":"getting-started/developer-guide/#installing-development-tools","text":"Both make and git can be installed from the default ubuntu package repositories. Run the following commands to install both tools. You may need to run the commands under sudo . apt-get update apt-get install build-essential git","title":"Installing Development Tools"},{"location":"getting-started/developer-guide/#installing-go","text":"Follow the Go Installation Instructions for installing Go. Run go version to ensure that Go has been properly installed.","title":"Installing Go"},{"location":"getting-started/developer-guide/#installing-mongodb","text":"Follow the MongoDB Installation Instructions for installing MongoDB. Once MongoDB is installed ensure mongod is running. If it is not running then start the service.","title":"Installing MongoDB"},{"location":"getting-started/developer-guide/#downloading-the-api-source-and-dependencies","text":"Run the following command to retrieve the API and all it's dependencies. The API source will be cloned to a folder called api in your current directory. git clone https://github.com/HackIllinois/api.git","title":"Downloading the API source and dependencies"},{"location":"getting-started/developer-guide/#first-time-api-setup","text":"After downloading the API source code you will want to build the entire repository and generate an Admin token for testing endpoints. This can be done by moving into the API folder and running: make setup You should see your Admin token near the bottom of the output. If this process hangs, ensure that mongod is running. This Admin JWT should be passed as the Authorization header when making a request via curl , Postman , or a similar tool.","title":"First time API setup"},{"location":"getting-started/developer-guide/#useful-tools-for-development","text":"There are a couple other useful but not necessary tools for working on the API. The first is a GUI tool for viewing and modifying the database. There are many options including MongoDB Compass and Robo 3T . You will also want to install Postman for making requests to the API when testing.","title":"Useful tools for development"},{"location":"getting-started/developer-guide/#building-testing-and-running-the-api","text":"In order to simply API development make is used for building, testing, and running the API. All make commands can be run from the root of the repository and they will properly find and operate on all of the services.","title":"Building, Testing, and Running the API"},{"location":"getting-started/developer-guide/#building-the-api","text":"Run the following command from the root of the repository. The gateway and all services will be built into bin . make all","title":"Building the API"},{"location":"getting-started/developer-guide/#testing-the-api","text":"Run the following command from the root of the repository. The gateway and all services will have their tests run and any errors will be reported. make test","title":"Testing the API"},{"location":"getting-started/developer-guide/#running-the-api","text":"Run the following command from the root of the repository. Note that this command will not rebuild the API so you must first build the API to ensure your binaries are up to date. make run","title":"Running the API"},{"location":"getting-started/developer-guide/#api-container","text":"There are also make targets provided for building a containerized version of the API for usage in production deployments.","title":"API Container"},{"location":"getting-started/developer-guide/#building-the-api-container","text":"Building a container requires that docker and go have already been installed. The following command should be run from the root of the api repository. make container","title":"Building the API Container"},{"location":"getting-started/developer-guide/#running-the-api-container","text":"You can obtain all released versions and the latest version of the container from DockerHub . The API container takes the name of the service to run as it's command arguement in the following docker run command. Ensure that the correct environment variables are set to load the configuration file and overwrite any secret configuration variables. docker run -d --env-file env.config hackillinois/api:latest <servicename>","title":"Running the API Container"},{"location":"getting-started/developer-guide/#contributing","text":"For contributing guidelines see the CONTRIBUTING.md file in the repository root.","title":"Contributing"},{"location":"getting-started/developer-guide/#documentation","text":"We use MkDocs for our documentation, and host at HackIllinois Docs .","title":"Documentation"},{"location":"reference/introduction/","text":"Introduction Our API is organized as a collection of microseverices , behind Arbor , a statically configured API framework, which acts as an API Gateway. Each microservice is responsible for doing only one set of tasks. For example, our user service is only responsible for storing and processing data for the various kinds of users our API deals with - mentors, participants, staff, etc. For authorization we use JSON Web Tokens (JWTs) that encode a user ID and some more information, in a system similar to Bearer (or token-based) authentication . When a client makes an HTTP request to api.hackillinois.org , it is taken through several middleware. One of them is the Authentication middleware, which ensures the user is authenticated. Another one is the Identification middleware, and puts the user ID of the requesting user in the HackIllinois-Identity header, which can be used by the individual services. The Error middleware allows passing of errors to the client using standard HTTP mechanisms, such as status codes, and response bodies. The authorized request is then forwarded to the relevant micro-service based on routes configured in the gateway , where controllers present in each micro-service process the request, call various service funcitons, perform the action requested, and return the response, which is passed back to the user, via Arbor. Our persistence layer consists of a MongoDB database, which has collections storing data relevant to each service. Errors Setting the DEBUG_MODE to \"true\" in the config file allows raw error messages (if applicable) to be passed through to the client. Otherwise, the raw error is suppressed. Errors are classified into the following types: DatabaseError - When database operations, such as fetch / insert / update) doesn't work. These are usually returned when a document / record that was requested wasn't found, such as when an operation is performed on an inexistent user. MalformedRequestError - When the request is invalid or missing some key information. Possible scenarios are, when field validation fails on a request body, or when an ID is missing for an endpoint that depends on it. AuthorizationError - When an authentication / authorization attempt fails. Possible scenarios include when OAuth-related services fail, such as when an authorization code is incorrect, a token is invalid / has expired etc. AttributeMismatchError - When an action is performed on a user who is missing some attribute, such as when a check-in (without override) is attempted for a user who doesn't have a registration or RSVP, modifying a decision on a candidate (hacker) whose decision has already been finalized by a senior staff member etc. InternalError - When there could be multiple possible causes of the error, this is what we use. Using DEBUG_MODE to get the raw error is highly recommended to expedite bug resolution. UnknownError - When the cause of an error cannot be identified.","title":"Introduction"},{"location":"reference/introduction/#introduction","text":"Our API is organized as a collection of microseverices , behind Arbor , a statically configured API framework, which acts as an API Gateway. Each microservice is responsible for doing only one set of tasks. For example, our user service is only responsible for storing and processing data for the various kinds of users our API deals with - mentors, participants, staff, etc. For authorization we use JSON Web Tokens (JWTs) that encode a user ID and some more information, in a system similar to Bearer (or token-based) authentication . When a client makes an HTTP request to api.hackillinois.org , it is taken through several middleware. One of them is the Authentication middleware, which ensures the user is authenticated. Another one is the Identification middleware, and puts the user ID of the requesting user in the HackIllinois-Identity header, which can be used by the individual services. The Error middleware allows passing of errors to the client using standard HTTP mechanisms, such as status codes, and response bodies. The authorized request is then forwarded to the relevant micro-service based on routes configured in the gateway , where controllers present in each micro-service process the request, call various service funcitons, perform the action requested, and return the response, which is passed back to the user, via Arbor. Our persistence layer consists of a MongoDB database, which has collections storing data relevant to each service.","title":"Introduction"},{"location":"reference/introduction/#errors","text":"Setting the DEBUG_MODE to \"true\" in the config file allows raw error messages (if applicable) to be passed through to the client. Otherwise, the raw error is suppressed. Errors are classified into the following types: DatabaseError - When database operations, such as fetch / insert / update) doesn't work. These are usually returned when a document / record that was requested wasn't found, such as when an operation is performed on an inexistent user. MalformedRequestError - When the request is invalid or missing some key information. Possible scenarios are, when field validation fails on a request body, or when an ID is missing for an endpoint that depends on it. AuthorizationError - When an authentication / authorization attempt fails. Possible scenarios include when OAuth-related services fail, such as when an authorization code is incorrect, a token is invalid / has expired etc. AttributeMismatchError - When an action is performed on a user who is missing some attribute, such as when a check-in (without override) is attempted for a user who doesn't have a registration or RSVP, modifying a decision on a candidate (hacker) whose decision has already been finalized by a senior staff member etc. InternalError - When there could be multiple possible causes of the error, this is what we use. Using DEBUG_MODE to get the raw error is highly recommended to expedite bug resolution. UnknownError - When the cause of an error cannot be identified.","title":"Errors"},{"location":"reference/api-writers/documentation-system/","text":"Documentation System We use MkDocs for our documentation, and host at HackIllinois API Docs . MkDocs is a Python module generates a static website, and/or a live-reloading server, from our Markdown-based documentation. It relies on a configuration file called mkdocs.yml , that is located the documentation . This configuration file can be used to specify the theme as well as menu structure of the documentation. Commands Here are the commands that can be used for interfacing with MkDocs. However, we have abstracted the ones useful to us through Makefile targets, which handle installing dependencies, and building a release documentation website. mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project Layout mkdocs . yml # The configuration file. Makefile # Makefile to install all dependencies License . md # What our project is licensed under docs / \u251c\u2500\u2500 index . md # The documentation homepage \u2502 \u251c\u2500\u2500 getting - started / # Directory containing the developer guide, and other resources to set up and run the API locally \u2502 \u2514\u2500\u2500 developer - guide . md \u251c\u2500\u2500 services / # Directory containing documentation for each service \u251c\u2500\u2500 gateway / # Documentation for the gateway and middleware \u2514\u2500\u2500 api - writers / # Includes information useful to API writers / developers ... # Other markdown pages, images and other files","title":"Documentation System"},{"location":"reference/api-writers/documentation-system/#documentation-system","text":"We use MkDocs for our documentation, and host at HackIllinois API Docs . MkDocs is a Python module generates a static website, and/or a live-reloading server, from our Markdown-based documentation. It relies on a configuration file called mkdocs.yml , that is located the documentation . This configuration file can be used to specify the theme as well as menu structure of the documentation.","title":"Documentation System"},{"location":"reference/api-writers/documentation-system/#commands","text":"Here are the commands that can be used for interfacing with MkDocs. However, we have abstracted the ones useful to us through Makefile targets, which handle installing dependencies, and building a release documentation website. mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"reference/api-writers/documentation-system/#project-layout","text":"mkdocs . yml # The configuration file. Makefile # Makefile to install all dependencies License . md # What our project is licensed under docs / \u251c\u2500\u2500 index . md # The documentation homepage \u2502 \u251c\u2500\u2500 getting - started / # Directory containing the developer guide, and other resources to set up and run the API locally \u2502 \u2514\u2500\u2500 developer - guide . md \u251c\u2500\u2500 services / # Directory containing documentation for each service \u251c\u2500\u2500 gateway / # Documentation for the gateway and middleware \u2514\u2500\u2500 api - writers / # Includes information useful to API writers / developers ... # Other markdown pages, images and other files","title":"Project Layout"},{"location":"reference/gateway/middleware/","text":"TODO","title":"Middleware"},{"location":"reference/gateway/routes/","text":"TODO","title":"Routes"},{"location":"reference/services/Authorization/","text":"Authorization GET /auth/PROVIDER/?redirect_uri=AUTHREDIRECTURI Redirects to the PROVIDER 's OAuth authorization page. Once the user accepts the OAuth authorization they will be redirected to the client's auth page with an OAuth code. This code should be sent to the API to be exchanged for an API JWT. Valid PROVIDER strings: github , google , linkedin AUTHREDIRECTURI can be specified to override the default OAuth redirect URI. This is the URI to which the application is redirected after the Authorization request is approved / rejected. POST /auth/code/PROVIDER/?redirect_uri=AUTHREDIRECTURI Exchanges a valid OAuth code from a JWT from the API. This JWT should be placed in the Authorization header for all future API requests. Valid PROVIDER strings: github , google and linkedin . AUTHREDIRECTURI can be specified to override the default OAuth redirect URI. This is the URI to which the application is redirected after the token request is completed. Warning For Google OAuth requests, the provided redirect_uri needs to be the same as the one provided in the GET request above. If the two redirect_uri s differ, Google will reject the OAuth token request. Example request { \"code\" : \"5897dk3j05192c5j2gc8\" } Example response { \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFybmF2c2Fua2FyYW5AZ21haWwuY29tIiwiZXhwIjoxNTI1ODQ1MzA0LCJpZCI6MCwicm9sZXMiOlsiVXNlciJdfQ.lYxFGSNDU9q7FoQHNHGvpKu1fTHf8yHsKPg8FDt9L-s\" } GET /auth/roles/USERID/ Gets the roles of the user with the id USERID . Request requires no body. Example response { \"id\" : \"github6892396\" , \"roles\" : [ \"User\" ] } GET /auth/roles/ Gets the roles of the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github6892396\" , \"roles\" : [ \"User\" ] } PUT /auth/roles/add/ Adds the given role to the user with the given id . The updated user's roles will be returned. Example request { \"id\" : \"github6892396\" , \"role\" : \"User\" } Example response { \"id\" : \"github6892396\" , \"roles\" : [ \"User\" ] } PUT /auth/roles/remove/ Removes the given role from the user with the given id . The updated user's roles will be returned. Example request { \"id\" : \"github6892396\" , \"role\" : \"User\" } Example response { \"id\" : \"github6892396\" , \"roles\" : [] } GET /auth/token/refresh/ Creates a new JWT for the current user. This is useful when the user's roles change, and the updated roles need to be encoded into a new JWT, such as during registration. Request requires no body. Example response { \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFybmF2c2Fua2FyYW5AZ21haWwuY29tIiwiZXhwIjoxNTI1ODQ1MzA0LCJpZCI6MCwicm9sZXMiOlsiVXNlciJdfQ.lYxFGSNDU9q7FoQHNHGvpKu1fTHf8yHsKPg8FDt9L-s\" } GET /auth/roles/list/ Gets the list of valid roles a user can have. Request requires no body. Example response { \"roles\" : [ \"Admin\" , \"Staff\" , \"Mentor\" , \"Applicant\" , \"Attendee\" , \"User\" , \"Sponsor\" ] } GET /auth/roles/list/ROLE/ Gets the list of users with the role ROLE . Request requires no body. Example response { \"userIds\" : [ \"google901283019238091820933\" , \"google908290138109283982388\" , \"github1290381\" ] }","title":"Authorization"},{"location":"reference/services/Authorization/#authorization","text":"","title":"Authorization"},{"location":"reference/services/Authorization/#get-authproviderredirect_uriauthredirecturi","text":"Redirects to the PROVIDER 's OAuth authorization page. Once the user accepts the OAuth authorization they will be redirected to the client's auth page with an OAuth code. This code should be sent to the API to be exchanged for an API JWT. Valid PROVIDER strings: github , google , linkedin AUTHREDIRECTURI can be specified to override the default OAuth redirect URI. This is the URI to which the application is redirected after the Authorization request is approved / rejected.","title":"GET /auth/PROVIDER/?redirect_uri=AUTHREDIRECTURI"},{"location":"reference/services/Authorization/#post-authcodeproviderredirect_uriauthredirecturi","text":"Exchanges a valid OAuth code from a JWT from the API. This JWT should be placed in the Authorization header for all future API requests. Valid PROVIDER strings: github , google and linkedin . AUTHREDIRECTURI can be specified to override the default OAuth redirect URI. This is the URI to which the application is redirected after the token request is completed. Warning For Google OAuth requests, the provided redirect_uri needs to be the same as the one provided in the GET request above. If the two redirect_uri s differ, Google will reject the OAuth token request. Example request { \"code\" : \"5897dk3j05192c5j2gc8\" } Example response { \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFybmF2c2Fua2FyYW5AZ21haWwuY29tIiwiZXhwIjoxNTI1ODQ1MzA0LCJpZCI6MCwicm9sZXMiOlsiVXNlciJdfQ.lYxFGSNDU9q7FoQHNHGvpKu1fTHf8yHsKPg8FDt9L-s\" }","title":"POST /auth/code/PROVIDER/?redirect_uri=AUTHREDIRECTURI"},{"location":"reference/services/Authorization/#get-authrolesuserid","text":"Gets the roles of the user with the id USERID . Request requires no body. Example response { \"id\" : \"github6892396\" , \"roles\" : [ \"User\" ] }","title":"GET /auth/roles/USERID/"},{"location":"reference/services/Authorization/#get-authroles","text":"Gets the roles of the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github6892396\" , \"roles\" : [ \"User\" ] }","title":"GET /auth/roles/"},{"location":"reference/services/Authorization/#put-authrolesadd","text":"Adds the given role to the user with the given id . The updated user's roles will be returned. Example request { \"id\" : \"github6892396\" , \"role\" : \"User\" } Example response { \"id\" : \"github6892396\" , \"roles\" : [ \"User\" ] }","title":"PUT /auth/roles/add/"},{"location":"reference/services/Authorization/#put-authrolesremove","text":"Removes the given role from the user with the given id . The updated user's roles will be returned. Example request { \"id\" : \"github6892396\" , \"role\" : \"User\" } Example response { \"id\" : \"github6892396\" , \"roles\" : [] }","title":"PUT /auth/roles/remove/"},{"location":"reference/services/Authorization/#get-authtokenrefresh","text":"Creates a new JWT for the current user. This is useful when the user's roles change, and the updated roles need to be encoded into a new JWT, such as during registration. Request requires no body. Example response { \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFybmF2c2Fua2FyYW5AZ21haWwuY29tIiwiZXhwIjoxNTI1ODQ1MzA0LCJpZCI6MCwicm9sZXMiOlsiVXNlciJdfQ.lYxFGSNDU9q7FoQHNHGvpKu1fTHf8yHsKPg8FDt9L-s\" }","title":"GET /auth/token/refresh/"},{"location":"reference/services/Authorization/#get-authroleslist","text":"Gets the list of valid roles a user can have. Request requires no body. Example response { \"roles\" : [ \"Admin\" , \"Staff\" , \"Mentor\" , \"Applicant\" , \"Attendee\" , \"User\" , \"Sponsor\" ] }","title":"GET /auth/roles/list/"},{"location":"reference/services/Authorization/#get-authroleslistrole","text":"Gets the list of users with the role ROLE . Request requires no body. Example response { \"userIds\" : [ \"google901283019238091820933\" , \"google908290138109283982388\" , \"github1290381\" ] }","title":"GET /auth/roles/list/ROLE/"},{"location":"reference/services/Check-In/","text":"Checkin GET /checkin/USERID/ Returns the checkin stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true } GET /checkin/ Returns the checkin stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true } POST /checkin/ Creates a checkin for the user with the associated user token userToken in the request body. Note You will need a user token rather than a user id. User tokens are generated at the endpoints GET /user/qr/ and GET /user/qr/USERID/ . If no token is provided, then the request will 422 . If the token expires prior to when the request is received or the token is malformed, then a response with status 403 with the message \"Bad user token.\" . Example request { \"userToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJnaXRodWIwMDAwMDAxIiwiZXhwIjoxNjc1Nzc1MjMzfQ.tREyQsEaG4TamXYZx8gNkY40-2FOdCr9n8dLrbk2UN8\" , \"override\" : true , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true } Example response { \"id\" : \"github0000001\" , \"override\" : true , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true , \"rsvpData\" : { ... } } PUT /checkin/ Updates the checkin for the user with the associated user token userToken in the request body. Note You will need a user token rather than a user id. User tokens are generated at the endpoints GET /user/qr/ and GET /user/qr/USERID/ . If no token is provided, then the request will 422 . If the token expires prior to when the request is received or the token is malformed, then a response with status 403 with the message \"Bad user token.\" . Example request { \"userToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJnaXRodWIwMDAwMDAxIiwiZXhwIjoxNjc1Nzc1MjMzfQ.tREyQsEaG4TamXYZx8gNkY40-2FOdCr9n8dLrbk2UN8\" , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true } Example response { \"id\" : \"github0000001\" , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true , \"rsvpData\" : { ... } } GET /checkin/list/ Returns a list of all user IDs for users who have checked in Request requires no body. Example response { \"checkedInUsers\" : [ \"github0000001\" , \"github0000005\" ] }","title":"Check-In"},{"location":"reference/services/Check-In/#checkin","text":"","title":"Checkin"},{"location":"reference/services/Check-In/#get-checkinuserid","text":"Returns the checkin stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true }","title":"GET /checkin/USERID/"},{"location":"reference/services/Check-In/#get-checkin","text":"Returns the checkin stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true }","title":"GET /checkin/"},{"location":"reference/services/Check-In/#post-checkin","text":"Creates a checkin for the user with the associated user token userToken in the request body. Note You will need a user token rather than a user id. User tokens are generated at the endpoints GET /user/qr/ and GET /user/qr/USERID/ . If no token is provided, then the request will 422 . If the token expires prior to when the request is received or the token is malformed, then a response with status 403 with the message \"Bad user token.\" . Example request { \"userToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJnaXRodWIwMDAwMDAxIiwiZXhwIjoxNjc1Nzc1MjMzfQ.tREyQsEaG4TamXYZx8gNkY40-2FOdCr9n8dLrbk2UN8\" , \"override\" : true , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true } Example response { \"id\" : \"github0000001\" , \"override\" : true , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true , \"rsvpData\" : { ... } }","title":"POST /checkin/"},{"location":"reference/services/Check-In/#put-checkin","text":"Updates the checkin for the user with the associated user token userToken in the request body. Note You will need a user token rather than a user id. User tokens are generated at the endpoints GET /user/qr/ and GET /user/qr/USERID/ . If no token is provided, then the request will 422 . If the token expires prior to when the request is received or the token is malformed, then a response with status 403 with the message \"Bad user token.\" . Example request { \"userToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJnaXRodWIwMDAwMDAxIiwiZXhwIjoxNjc1Nzc1MjMzfQ.tREyQsEaG4TamXYZx8gNkY40-2FOdCr9n8dLrbk2UN8\" , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true } Example response { \"id\" : \"github0000001\" , \"hasCheckedIn\" : true , \"hasPickedUpSwag\" : true , \"rsvpData\" : { ... } }","title":"PUT /checkin/"},{"location":"reference/services/Check-In/#get-checkinlist","text":"Returns a list of all user IDs for users who have checked in Request requires no body. Example response { \"checkedInUsers\" : [ \"github0000001\" , \"github0000005\" ] }","title":"GET /checkin/list/"},{"location":"reference/services/Decision/","text":"Decision GET /decision/USERID/ Returns the decision stored for the user with the id USERID . Request requires no body. Example response { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673845 }, { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 } ] } GET /decision/ Returns the decision stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" } POST /decision/ Updates the decision for the user as specified in the id field of the request. The full decision history is returned in the response. Example request { \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 } Example response { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673845 }, { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 }, { \"finalized\" : true , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 } ] } POST /decision/finalize/ Finalizes / unfinalizes the decision for the current user. The full decision history is returned in the response. This endpoint will return an AttributeMismatchError if the requested action results in a Finalized status matching the current Finalized status. Example request { \"id\" : \"github9279532\" , \"finalized\" : true } Example response { \"finalized\" : true , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673845 }, { \"finalized\" : true , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 } ] } GET /decision/filter/?key=value Returns the user decisions, filtered with the given key-value pairs. Request requires no body. Example response { \"decisions\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673845 }, { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 } ] }, { \"finalized\" : false , \"id\" : \"github9279533\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279533\" , \"timestamp\" : 1526673863 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279533\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279533\" , \"timestamp\" : 1526673846 }, { \"finalized\" : false , \"id\" : \"github9279533\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279533\" , \"timestamp\" : 1526673863 } ] } ] }","title":"Decision"},{"location":"reference/services/Decision/#decision","text":"","title":"Decision"},{"location":"reference/services/Decision/#get-decisionuserid","text":"Returns the decision stored for the user with the id USERID . Request requires no body. Example response { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673845 }, { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 } ] }","title":"GET /decision/USERID/"},{"location":"reference/services/Decision/#get-decision","text":"Returns the decision stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" }","title":"GET /decision/"},{"location":"reference/services/Decision/#post-decision","text":"Updates the decision for the user as specified in the id field of the request. The full decision history is returned in the response. Example request { \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 } Example response { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673845 }, { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 }, { \"finalized\" : true , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 } ] }","title":"POST /decision/"},{"location":"reference/services/Decision/#post-decisionfinalize","text":"Finalizes / unfinalizes the decision for the current user. The full decision history is returned in the response. This endpoint will return an AttributeMismatchError if the requested action results in a Finalized status matching the current Finalized status. Example request { \"id\" : \"github9279532\" , \"finalized\" : true } Example response { \"finalized\" : true , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673845 }, { \"finalized\" : true , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 } ] }","title":"POST /decision/finalize/"},{"location":"reference/services/Decision/#get-decisionfilterkeyvalue","text":"Returns the user decisions, filtered with the given key-value pairs. Request requires no body. Example response { \"decisions\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673845 }, { \"finalized\" : false , \"id\" : \"github9279532\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279532\" , \"timestamp\" : 1526673862 } ] }, { \"finalized\" : false , \"id\" : \"github9279533\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279533\" , \"timestamp\" : 1526673863 , \"history\" : [ { \"finalized\" : false , \"id\" : \"github9279533\" , \"status\" : \"PENDING\" , \"wave\" : 0 , \"reviewer\" : \"github9279533\" , \"timestamp\" : 1526673846 }, { \"finalized\" : false , \"id\" : \"github9279533\" , \"status\" : \"ACCEPTED\" , \"wave\" : 1 , \"reviewer\" : \"github9279533\" , \"timestamp\" : 1526673863 } ] } ] }","title":"GET /decision/filter/?key=value"},{"location":"reference/services/Event/","text":"Event The isAsync field for events is optional. If it is not specified or is false, then startTime and endTime are required. Otherwise, startTime and endTime are optional. The fields isPrivate and displayOnStaffCheckin are private are only visible to users that have the Staff or Admin role. Example struct a non-staff/non-admin will receive { \"id\" : \"93d91d48a5b111edafa10242ac120002\" , \"name\" : \"Example Event 1\" , \"description\" : \"This is a placeholder description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"sponsor\" : \"\" , \"eventType\" : \"MEAL\" , \"locations\" : [ { \"description\" : \"Location info here\" , \"tags\" : [ \"SIEBEL3\" , \"CIF\" ], \"latitude\" : 123.456 , \"longitude\" : 123.456 , }, \"points\" : 0 , } Example struct a staff/admin will receive { \"id\" : \"93d91d48a5b111edafa10242ac120002\" , \"name\" : \"Example Event 1\" , \"description\" : \"This is a placeholder description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"sponsor\" : \"\" , \"eventType\" : \"MEAL\" , \"locations\" : [ { \"description\" : \"Location info here\" , \"tags\" : [ \"SIEBEL3\" , \"CIF\" ], \"latitude\" : 123.456 , \"longitude\" : 123.456 , }, \"points\" : 0 , \"isPrivate\" : false , \"displayOnStaffCheckin\" : true , } GET /event/EVENTID/ Returns the event with the id of EVENTID . Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" } GET /event/ Returns a list of all events. Request requires no body. Example response { \"events\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" }, { \"id\" : \"52fdfcab71282654f163f5f0f9a621d72\" , \"name\" : \"Example Event 11\" , \"description\" : \"This is another description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL3\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" } ] } GET /event/filter/?key=value Returns all events, filtered with the given key-value pairs. Request requires no body. Example response { \"events\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" }, { \"id\" : \"9566c74d10037c4d7bbb0407d1e2c649\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL3\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" } ] } POST /event/ Creates an event with the requested fields. Returns the created event. Valid values for eventType are MEAL , SPEAKER , WORKSHOP , MINIEVENT , QNA , or OTHER . Example request { \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"isAsync\" : false } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" } DELETE /event/EVENTID/ Endpoint to delete an event with name EVENTID . It removes the EVENTID from the event trackers, and every user's tracker. Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" } PUT /event/ Updates the event with the id specified in the id field of the request. Returns the updated event. Example request { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ] } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" } POST /event/track/ Marks the specified user as attending the specified event. Returns the tracker for the user and the tracker for the event. Example request { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"userId\" : \"github0000001\" } Example response { \"eventTracker\" : { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"users\" : [ \"github0000001\" , ] }, \"userTracker\" : { \"userId\" : \"github0000001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" ] } } GET /event/track/event/EVENTID/ Returns the tracker for the event with the id EVENTID . Request requires no body. Example response { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"users\" : [ \"github0000001\" , ] } GET /event/track/user/USERID/ Returns the tracker for the user with the id USERID . Request requires no body. Example response { \"userId\" : \"github0000001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" ] } GET /event/favorite/ Returns the event favorites for the current user. Request requires no body. Example response { \"id\" : \"github001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" , \"34edfc072182654f163f5f0f9a621d72\" ] } POST /event/favorite/ Adds the given event to the favorites for the current user. Example request { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" } Example response { \"id\" : \"github001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" , \"34dffc072182654f163f5f0f9a621d72\" ] } DELETE /event/favorite/ Removes the given event from the favorites for the current user. Example request { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" , } Example response { \"id\" : \"github001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" ] } GET /event/code/{id}/ Gets a struct that contains information about the event code (generated upon event creation) and expiration time. By convention, event checkin codes will be 6 bytes long. Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"code\" : \"sample_code\" , \"expiration\" : 1521388800 } PUT /event/code/{id}/ Updates a struct that contains information about the event code (generated upon event creation) and expiration time. Example request { \"code\" : \"new_code\" , \"expiration\" : 1521388800 } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"code\" : \"new_code\" , \"expiration\" : 1521388800 } POST /event/staff/checkin/ Used for staff to check in attendees to various events. Request should include an attendee's user token ( userToken ) and an event id ( eventId ). Returns a status, the user's new points, and the user's total points. Valid values for status are Success , InvalidEventId , BadUserToken , AlreadyCheckedIn . Warning Please be aware that BadUserToken will be returned if the user token is invalid, expired, or malformed . If you get this status, the staff should see a message like Bad user token. Try asking the attendee to refresh their qr code. To do this, the attendee will need to request GET /user/qr/ again. Note When status != Success , the newPoints and totalPoints fields will equal -1 and should be ignored. Note On status Sucess and AlreadyCheckedIn , the field rsvpData will be populated with the user's RSVP data and registration data. Note The user token some_token should be retrieved from the userToken field of a user QR code URI ( hackillinois://user?userToken=some_token ) Example request { \"userToken\" : \"some_token\" , \"eventId\" : \"some_event_id\" } Example response { \"newPoints\" : 10 , \"totalPoints\" : 10 , \"status\" : \"Success\" , \"rsvpData\" : { \"id\" : \"github0123456\" , \"isAttending\" : true , \"registrationData\" : { ... } } } POST /event/checkin/ Used for attendees to check into various events. Like /event/staff/checkin/ , but doesn't require staff verification. Request should include an event code ( code ). Returns a status, the user's new points, and the user's total points. Valid values for status are Success , InvalidCode , ExpiredOrProspective , AlreadyCheckedIn . Note ExpiredOrProspective in this case means the event has already happened, or has not started yet. Note When status != Success , the newPoints and totalPoints fields will equal -1 and should be ignored. Note The code should be retrieved from the code field of a event QR code URI ( hackillinois://event?code=some_event_code ) Example request { \"code\" : \"some_event_code\" } Example response { \"newPoints\" : 10 , \"totalPoints\" : 10 , \"status\" : \"Success\" }","title":"Event"},{"location":"reference/services/Event/#event","text":"The isAsync field for events is optional. If it is not specified or is false, then startTime and endTime are required. Otherwise, startTime and endTime are optional. The fields isPrivate and displayOnStaffCheckin are private are only visible to users that have the Staff or Admin role. Example struct a non-staff/non-admin will receive { \"id\" : \"93d91d48a5b111edafa10242ac120002\" , \"name\" : \"Example Event 1\" , \"description\" : \"This is a placeholder description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"sponsor\" : \"\" , \"eventType\" : \"MEAL\" , \"locations\" : [ { \"description\" : \"Location info here\" , \"tags\" : [ \"SIEBEL3\" , \"CIF\" ], \"latitude\" : 123.456 , \"longitude\" : 123.456 , }, \"points\" : 0 , } Example struct a staff/admin will receive { \"id\" : \"93d91d48a5b111edafa10242ac120002\" , \"name\" : \"Example Event 1\" , \"description\" : \"This is a placeholder description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"sponsor\" : \"\" , \"eventType\" : \"MEAL\" , \"locations\" : [ { \"description\" : \"Location info here\" , \"tags\" : [ \"SIEBEL3\" , \"CIF\" ], \"latitude\" : 123.456 , \"longitude\" : 123.456 , }, \"points\" : 0 , \"isPrivate\" : false , \"displayOnStaffCheckin\" : true , }","title":"Event"},{"location":"reference/services/Event/#get-eventeventid","text":"Returns the event with the id of EVENTID . Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" }","title":"GET /event/EVENTID/"},{"location":"reference/services/Event/#get-event","text":"Returns a list of all events. Request requires no body. Example response { \"events\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" }, { \"id\" : \"52fdfcab71282654f163f5f0f9a621d72\" , \"name\" : \"Example Event 11\" , \"description\" : \"This is another description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL3\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" } ] }","title":"GET /event/"},{"location":"reference/services/Event/#get-eventfilterkeyvalue","text":"Returns all events, filtered with the given key-value pairs. Request requires no body. Example response { \"events\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" }, { \"id\" : \"9566c74d10037c4d7bbb0407d1e2c649\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL3\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" } ] }","title":"GET /event/filter/?key=value"},{"location":"reference/services/Event/#post-event","text":"Creates an event with the requested fields. Returns the created event. Valid values for eventType are MEAL , SPEAKER , WORKSHOP , MINIEVENT , QNA , or OTHER . Example request { \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"isAsync\" : false } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" }","title":"POST /event/"},{"location":"reference/services/Event/#delete-eventeventid","text":"Endpoint to delete an event with name EVENTID . It removes the EVENTID from the event trackers, and every user's tracker. Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" }","title":"DELETE /event/EVENTID/"},{"location":"reference/services/Event/#put-event","text":"Updates the event with the id specified in the id field of the request. Returns the updated event. Example request { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ] } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Event 10\" , \"description\" : \"This is a description\" , \"startTime\" : 1532202702 , \"endTime\" : 1532212702 , \"locations\" : [ { \"description\" : \"Example Location\" , \"tags\" : [ \"SIEBEL0\" , \"ECEB1\" ], \"latitude\" : 40.1138 , \"longitude\" : -88.2249 } ], \"sponsor\" : \"Example sponsor\" , \"eventType\" : \"WORKSHOP\" }","title":"PUT /event/"},{"location":"reference/services/Event/#post-eventtrack","text":"Marks the specified user as attending the specified event. Returns the tracker for the user and the tracker for the event. Example request { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"userId\" : \"github0000001\" } Example response { \"eventTracker\" : { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"users\" : [ \"github0000001\" , ] }, \"userTracker\" : { \"userId\" : \"github0000001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" ] } }","title":"POST /event/track/"},{"location":"reference/services/Event/#get-eventtrackeventeventid","text":"Returns the tracker for the event with the id EVENTID . Request requires no body. Example response { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"users\" : [ \"github0000001\" , ] }","title":"GET /event/track/event/EVENTID/"},{"location":"reference/services/Event/#get-eventtrackuseruserid","text":"Returns the tracker for the user with the id USERID . Request requires no body. Example response { \"userId\" : \"github0000001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" ] }","title":"GET /event/track/user/USERID/"},{"location":"reference/services/Event/#get-eventfavorite","text":"Returns the event favorites for the current user. Request requires no body. Example response { \"id\" : \"github001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" , \"34edfc072182654f163f5f0f9a621d72\" ] }","title":"GET /event/favorite/"},{"location":"reference/services/Event/#post-eventfavorite","text":"Adds the given event to the favorites for the current user. Example request { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" } Example response { \"id\" : \"github001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" , \"34dffc072182654f163f5f0f9a621d72\" ] }","title":"POST /event/favorite/"},{"location":"reference/services/Event/#delete-eventfavorite","text":"Removes the given event from the favorites for the current user. Example request { \"eventId\" : \"52fdfc072182654f163f5f0f9a621d72\" , } Example response { \"id\" : \"github001\" , \"events\" : [ \"52fdfc072182654f163f5f0f9a621d72\" ] }","title":"DELETE /event/favorite/"},{"location":"reference/services/Event/#get-eventcodeid","text":"Gets a struct that contains information about the event code (generated upon event creation) and expiration time. By convention, event checkin codes will be 6 bytes long. Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"code\" : \"sample_code\" , \"expiration\" : 1521388800 }","title":"GET /event/code/{id}/"},{"location":"reference/services/Event/#put-eventcodeid","text":"Updates a struct that contains information about the event code (generated upon event creation) and expiration time. Example request { \"code\" : \"new_code\" , \"expiration\" : 1521388800 } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"code\" : \"new_code\" , \"expiration\" : 1521388800 }","title":"PUT /event/code/{id}/"},{"location":"reference/services/Event/#post-eventstaffcheckin","text":"Used for staff to check in attendees to various events. Request should include an attendee's user token ( userToken ) and an event id ( eventId ). Returns a status, the user's new points, and the user's total points. Valid values for status are Success , InvalidEventId , BadUserToken , AlreadyCheckedIn . Warning Please be aware that BadUserToken will be returned if the user token is invalid, expired, or malformed . If you get this status, the staff should see a message like Bad user token. Try asking the attendee to refresh their qr code. To do this, the attendee will need to request GET /user/qr/ again. Note When status != Success , the newPoints and totalPoints fields will equal -1 and should be ignored. Note On status Sucess and AlreadyCheckedIn , the field rsvpData will be populated with the user's RSVP data and registration data. Note The user token some_token should be retrieved from the userToken field of a user QR code URI ( hackillinois://user?userToken=some_token ) Example request { \"userToken\" : \"some_token\" , \"eventId\" : \"some_event_id\" } Example response { \"newPoints\" : 10 , \"totalPoints\" : 10 , \"status\" : \"Success\" , \"rsvpData\" : { \"id\" : \"github0123456\" , \"isAttending\" : true , \"registrationData\" : { ... } } }","title":"POST /event/staff/checkin/"},{"location":"reference/services/Event/#post-eventcheckin","text":"Used for attendees to check into various events. Like /event/staff/checkin/ , but doesn't require staff verification. Request should include an event code ( code ). Returns a status, the user's new points, and the user's total points. Valid values for status are Success , InvalidCode , ExpiredOrProspective , AlreadyCheckedIn . Note ExpiredOrProspective in this case means the event has already happened, or has not started yet. Note When status != Success , the newPoints and totalPoints fields will equal -1 and should be ignored. Note The code should be retrieved from the code field of a event QR code URI ( hackillinois://event?code=some_event_code ) Example request { \"code\" : \"some_event_code\" } Example response { \"newPoints\" : 10 , \"totalPoints\" : 10 , \"status\" : \"Success\" }","title":"POST /event/checkin/"},{"location":"reference/services/Mail/","text":"Mail POST /mail/send/ Sends an email to the users in the list ids with based on the given template with generated substitutions. Example request { \"ids\" : [ \"testuser1\" ], \"template\" : \"api-test\" } Example response { \"results\" : { \"total_rejected_recipients\" : 0 , \"total_accepted_recipients\" : 1 } } POST /mail/send/list/ Sends an email to the users in the mailing list listId with based on the given template with generated substitutions. Example request { \"listId\" : \"test\" , \"template\" : \"api-test\" } Example response { \"results\" : { \"total_rejected_recipients\" : 0 , \"total_accepted_recipients\" : 1 } } GET /mail/list/ Returns a list of all created mailing lists. Request requires no body. Example response { \"mailLists\" : [ { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] }, { \"id\" : \"test2\" , \"userIds\" : [ \"testuser2\" , \"testuser3\" ] } ] } POST /mail/list/create/ Creates a mailing list with the ID id and with the initial list of users in userIds , if provided. Example request { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] } Example response { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] } POST /mail/list/add/ Modifies the mailing list with the ID id adding the users in the list userIds . Example request { \"id\" : \"test\" , \"userIds\" : [ \"testuser2\" ] } Example response { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" , \"testuser2\" ] } POST /mail/list/remove/ Modifies the mailing list with the ID id , removing users that are specified in the list userIds . Example request { \"id\" : \"test\" , \"userIds\" : [ \"testuser2\" ] } Example response { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] } GET /mail/list/LISTID/ Returns the mailing list with the ID LISTID . Request requires no body. Example response { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] }","title":"Mail"},{"location":"reference/services/Mail/#mail","text":"","title":"Mail"},{"location":"reference/services/Mail/#post-mailsend","text":"Sends an email to the users in the list ids with based on the given template with generated substitutions. Example request { \"ids\" : [ \"testuser1\" ], \"template\" : \"api-test\" } Example response { \"results\" : { \"total_rejected_recipients\" : 0 , \"total_accepted_recipients\" : 1 } }","title":"POST /mail/send/"},{"location":"reference/services/Mail/#post-mailsendlist","text":"Sends an email to the users in the mailing list listId with based on the given template with generated substitutions. Example request { \"listId\" : \"test\" , \"template\" : \"api-test\" } Example response { \"results\" : { \"total_rejected_recipients\" : 0 , \"total_accepted_recipients\" : 1 } }","title":"POST /mail/send/list/"},{"location":"reference/services/Mail/#get-maillist","text":"Returns a list of all created mailing lists. Request requires no body. Example response { \"mailLists\" : [ { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] }, { \"id\" : \"test2\" , \"userIds\" : [ \"testuser2\" , \"testuser3\" ] } ] }","title":"GET /mail/list/"},{"location":"reference/services/Mail/#post-maillistcreate","text":"Creates a mailing list with the ID id and with the initial list of users in userIds , if provided. Example request { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] } Example response { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] }","title":"POST /mail/list/create/"},{"location":"reference/services/Mail/#post-maillistadd","text":"Modifies the mailing list with the ID id adding the users in the list userIds . Example request { \"id\" : \"test\" , \"userIds\" : [ \"testuser2\" ] } Example response { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" , \"testuser2\" ] }","title":"POST /mail/list/add/"},{"location":"reference/services/Mail/#post-maillistremove","text":"Modifies the mailing list with the ID id , removing users that are specified in the list userIds . Example request { \"id\" : \"test\" , \"userIds\" : [ \"testuser2\" ] } Example response { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] }","title":"POST /mail/list/remove/"},{"location":"reference/services/Mail/#get-maillistlistid","text":"Returns the mailing list with the ID LISTID . Request requires no body. Example response { \"id\" : \"test\" , \"userIds\" : [ \"testuser1\" ] }","title":"GET /mail/list/LISTID/"},{"location":"reference/services/Notifications/","text":"Notifications GET /notifications/topic/ Returns the list of valid topics. Request requires no body. Example response { \"topics\" : [ \"Admin\" , \"Staff\" , \"Mentor\" , \"Applicant\" , \"Attendee\" , \"User\" , \"Sponsor\" , \"ExampleTopic\" ] } POST /notifications/topic/ Create a new topic with the specified information. Example request { \"id\" : \"ExampleTopic\" } Example response { \"id\" : \"ExampleTopic\" , \"userIds\" : [] } GET /notifications/topic/all/ Returns the notifications for all topics the user is subscribed to. Request requires no body. Example response { \"notifications\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"topic\" : \"User\" , \"title\" : \"Example Title\" , \"body\" : \"Example Body\" , \"time\" : 1551805897 } ] } GET /notifications/topic/public/ Returns the notifications which are publicly viewable. Request requires no body. Example response { \"notifications\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"topic\" : \"User\" , \"title\" : \"Example Title\" , \"body\" : \"Example Body\" , \"time\" : 1551805897 } ] } GET /notifications/topic/TOPICID/ Returns the notifications for the topic with the id TOPICID . Request requires no body. Example response { \"notifications\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"topic\" : \"User\" , \"title\" : \"Example Title\" , \"body\" : \"Example Body\" , \"time\" : 1551805897 } ] } POST /notifications/topic/TOPICID/ Publishes a notification to the topic with the ID TOPICID . The id in the response is the ID for the notification order which is sending the actual notifications asynchronously. Example request { \"title\" : \"Example Title\" , \"body\" : \"Example Body\" } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"recipients\" : 5 , \"success\" : 0 , \"failure\" : 0 , \"time\" : 1553564589 } DELETE /notifications/topic/TOPICID/ Deletes the topic with the ID TOPICID . Request requires no body. Example response {} POST /notifications/topic/TOPICID/subscribe/ Subscribes the user to the topic with the id TOPICID and return the user's list of subscriptions. Request requires no body. Example response { \"topics\" : [ \"ExampleTopic\" , \"User\" , \"Applicant\" , \"Admin\" , \"Attendee\" , \"Mentor\" ] } POST /notifications/topic/TOPICID/unsubscribe/ Unsubscribes the user to the topic with the id TOPICID and return the user's list of subscriptions. Request requires no body. Example response { \"topics\" : [ \"User\" , \"Applicant\" , \"Admin\" , \"Attendee\" , \"Mentor\" ] } POST /notifications/device/ Registers the specified device token to the current user. Example request { \"token\" : \"example_token\" , \"platform\" : \"android\" } Example response { \"devices\" : [ \"arn:example139091820398\" ] } GET /notifications/order/ID/ Returns the notification order with the id ID. This endpoint should be used to determine the status of an asynchronously published notification. Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"recipients\" : 5 , \"success\" : 5 , \"failure\" : 0 , \"time\" : 1553564589 }","title":"Notifications"},{"location":"reference/services/Notifications/#notifications","text":"","title":"Notifications"},{"location":"reference/services/Notifications/#get-notificationstopic","text":"Returns the list of valid topics. Request requires no body. Example response { \"topics\" : [ \"Admin\" , \"Staff\" , \"Mentor\" , \"Applicant\" , \"Attendee\" , \"User\" , \"Sponsor\" , \"ExampleTopic\" ] }","title":"GET /notifications/topic/"},{"location":"reference/services/Notifications/#post-notificationstopic","text":"Create a new topic with the specified information. Example request { \"id\" : \"ExampleTopic\" } Example response { \"id\" : \"ExampleTopic\" , \"userIds\" : [] }","title":"POST /notifications/topic/"},{"location":"reference/services/Notifications/#get-notificationstopicall","text":"Returns the notifications for all topics the user is subscribed to. Request requires no body. Example response { \"notifications\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"topic\" : \"User\" , \"title\" : \"Example Title\" , \"body\" : \"Example Body\" , \"time\" : 1551805897 } ] }","title":"GET /notifications/topic/all/"},{"location":"reference/services/Notifications/#get-notificationstopicpublic","text":"Returns the notifications which are publicly viewable. Request requires no body. Example response { \"notifications\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"topic\" : \"User\" , \"title\" : \"Example Title\" , \"body\" : \"Example Body\" , \"time\" : 1551805897 } ] }","title":"GET /notifications/topic/public/"},{"location":"reference/services/Notifications/#get-notificationstopictopicid","text":"Returns the notifications for the topic with the id TOPICID . Request requires no body. Example response { \"notifications\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"topic\" : \"User\" , \"title\" : \"Example Title\" , \"body\" : \"Example Body\" , \"time\" : 1551805897 } ] }","title":"GET /notifications/topic/TOPICID/"},{"location":"reference/services/Notifications/#post-notificationstopictopicid","text":"Publishes a notification to the topic with the ID TOPICID . The id in the response is the ID for the notification order which is sending the actual notifications asynchronously. Example request { \"title\" : \"Example Title\" , \"body\" : \"Example Body\" } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"recipients\" : 5 , \"success\" : 0 , \"failure\" : 0 , \"time\" : 1553564589 }","title":"POST /notifications/topic/TOPICID/"},{"location":"reference/services/Notifications/#delete-notificationstopictopicid","text":"Deletes the topic with the ID TOPICID . Request requires no body. Example response {}","title":"DELETE /notifications/topic/TOPICID/"},{"location":"reference/services/Notifications/#post-notificationstopictopicidsubscribe","text":"Subscribes the user to the topic with the id TOPICID and return the user's list of subscriptions. Request requires no body. Example response { \"topics\" : [ \"ExampleTopic\" , \"User\" , \"Applicant\" , \"Admin\" , \"Attendee\" , \"Mentor\" ] }","title":"POST /notifications/topic/TOPICID/subscribe/"},{"location":"reference/services/Notifications/#post-notificationstopictopicidunsubscribe","text":"Unsubscribes the user to the topic with the id TOPICID and return the user's list of subscriptions. Request requires no body. Example response { \"topics\" : [ \"User\" , \"Applicant\" , \"Admin\" , \"Attendee\" , \"Mentor\" ] }","title":"POST /notifications/topic/TOPICID/unsubscribe/"},{"location":"reference/services/Notifications/#post-notificationsdevice","text":"Registers the specified device token to the current user. Example request { \"token\" : \"example_token\" , \"platform\" : \"android\" } Example response { \"devices\" : [ \"arn:example139091820398\" ] }","title":"POST /notifications/device/"},{"location":"reference/services/Notifications/#get-notificationsorderid","text":"Returns the notification order with the id ID. This endpoint should be used to determine the status of an asynchronously published notification. Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"recipients\" : 5 , \"success\" : 5 , \"failure\" : 0 , \"time\" : 1553564589 }","title":"GET /notifications/order/ID/"},{"location":"reference/services/Profile/","text":"Profile Warning The id in the profile service refers to a separate, randomly-generated, profile-only id. This is different from the user id used in other services. When a profile is created, a mapping from the user id to the profile id is stored in the database. We will distinguish user id and profile id by using github123456 and profileid123456 for each, respectively, in the examples below. GET /profile/ Returns the profile stored for the current user. Valid values for teamStatus are LOOKING_FOR_MEMBERS , LOOKING_FOR_TEAM , and NOT_LOOKING . Request requires no body. Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 1 } GET /profile/ID/ Returns the profile stored for user that has the id ID . Request requires no body. Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 1 } GET /profile/list/?teamStatus=value&interests=value,value,value&limit=value Danger Internal use only! If you are looking to search for profiles as an attendee, applicant, or mentor, please use GET /profile/search/ . Returns a list of profiles matching the filter conditions. teamStatus is a string matching the user's team status. interests is a comma-separated string representing the user's interests. i.e if the user's interests are [\"C++\", \"Machine Learning\"], you can filter on this by sending interests=\"C++,Machine Learning\" If a limit parameter is provided, it will return the first matching limit profiles. Otherwise, it will return all of the matched profiles. If no parameters are provided, it returns all profiles that are in the database. Request requires no body. Example response { \"profiles\" : [ { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 1 }, { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 2 }, ] } POST /profile/ Creates a profile for the currently authenticated user (determined by the JWT in the Authorization header). Warning You cannot set points or foodWave to any value. Both these fields will default to 0 . If you want to edit these fields, call PUT /profile/ . Example request { \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" } Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 0 , \"timezone\" : \"Americas UTC+8\" , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 0 } PUT /profile/ Updates the profile for the currently authenticated user (determined by the JWT in the Authorization header). Warning If the user is not a Staff or Admin, they cannot edit the points or foodWave field through this (for security reasons) Example request { \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" } Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 2 } DELETE /profile/ Danger Temporarily disabled since Apr 2nd, 2021. Deletes the profile for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 2 } GET /profile/leaderboard/?limit= Note This is a public endpoint Returns a list of profiles sorted by points descending. If a limit parameter is provided, it will return the first limit profiles. Otherwise, it will return all of the profiles. Request requires no body. Example response { \"profiles\" : [ { \"id\" : \"profileid123456\" , \"points\" : 2021 , \"discord\" : \"patrick#1234\" }, { \"id\" : \"profileid123456\" , \"points\" : 2021 , \"discord\" : \"patrick#1234\" }, ] } GET /profile/search/?teamStatus=value&interests=value,value,value&limit=value Returns a list of profiles matching the filter conditions. teamStatus is a string matching the user's team status. Valid values for teamStatus are LOOKING_FOR_MEMBERS , LOOKING_FOR_TEAM , and NOT_LOOKING . interests is a comma-separated string representing the user's interests. i.e if the user's interests are [\"C++\", \"Machine Learning\"], you can filter on this by sending interests=\"C++,Machine Learning\" If a limit parameter is provided, it will return the first matching limit profiles. Otherwise, it will return all of the matched profiles. Warning Users with teamStatus NOT_LOOKING will be shown unless you filter against it. Make sure you consider this in respect to your use case and act accordingly! Request requires no body. Example response { \"profiles\" : [ { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , }, { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , }, ] } POST /profile/event/checkin/ Danger Internal use only! Validates the status of an event that the user is trying to check into. This is an internal endpoint hit during the checkin process (when the user posts a code to the event service). The response is a status string, and throws an error (except the case when the user is already checked in). In the case that the user has already been checked, status is set to \"Event already redeemed\" and a 200 status code is still used. Note Here, the \"id\" actually refers to the user id, not the profile id (hence github123456 instead of profileid123456 ) Example request { \"id\" : \"github123456\" , \"eventID\" : \"52fdfc072182654f163f5f0f9a621d72\" } Example response { \"status\" : \"Success\" } POST /profile/points/award/ Danger Internal use only! Takes a struct with a profile and a certain number of points to increment their score by, and returns this profile upon completion. Note: here, the \"id\" actually refers to the user id, not the profile id (hence github123456 instead of profileid123456 ) Example request { \"id\" : \"github123456\" , \"points\" : 10 } Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 10 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 2 } GET /profile/favorite/ Returns a list of profiles that the current user has favorited. Request requires no body. Example response { \"id\" : \"testid\" , \"profiles\" : [ \"testid3\" , ] } POST /profile/favorite/ Adds the specified profile to the current user's favorite list, and returns the updated list of favorite profiles. Example request { \"id\" : \"testid2\" } Example response { \"id\" : \"testid\" , \"profiles\" : [ \"testid3\" , \"testid2\" ] } DELETE /profile/favorite/ Removes the specified profile from the current user's favorite list, and returns the updated list of favorite profiles. Example request { \"id\" : \"testid3\" } Example response { \"id\" : \"testid\" , \"profiles\" : [ \"testid2\" ] } GET /profile/tier/threshold/ Returns the profile tier name to minimum point threshold mapping. Request requires no body. Example response [ { \"name\" : \"cookie\" , \"threshold\" : 0 }, { \"name\" : \"cupcake\" , \"threshold\" : 50 } ]","title":"Profile"},{"location":"reference/services/Profile/#profile","text":"Warning The id in the profile service refers to a separate, randomly-generated, profile-only id. This is different from the user id used in other services. When a profile is created, a mapping from the user id to the profile id is stored in the database. We will distinguish user id and profile id by using github123456 and profileid123456 for each, respectively, in the examples below.","title":"Profile"},{"location":"reference/services/Profile/#get-profile","text":"Returns the profile stored for the current user. Valid values for teamStatus are LOOKING_FOR_MEMBERS , LOOKING_FOR_TEAM , and NOT_LOOKING . Request requires no body. Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 1 }","title":"GET /profile/"},{"location":"reference/services/Profile/#get-profileid","text":"Returns the profile stored for user that has the id ID . Request requires no body. Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 1 }","title":"GET /profile/ID/"},{"location":"reference/services/Profile/#get-profilelistteamstatusvalueinterestsvaluevaluevaluelimitvalue","text":"Danger Internal use only! If you are looking to search for profiles as an attendee, applicant, or mentor, please use GET /profile/search/ . Returns a list of profiles matching the filter conditions. teamStatus is a string matching the user's team status. interests is a comma-separated string representing the user's interests. i.e if the user's interests are [\"C++\", \"Machine Learning\"], you can filter on this by sending interests=\"C++,Machine Learning\" If a limit parameter is provided, it will return the first matching limit profiles. Otherwise, it will return all of the matched profiles. If no parameters are provided, it returns all profiles that are in the database. Request requires no body. Example response { \"profiles\" : [ { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 1 }, { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 2 }, ] }","title":"GET /profile/list/?teamStatus=value&amp;interests=value,value,value&amp;limit=value"},{"location":"reference/services/Profile/#post-profile","text":"Creates a profile for the currently authenticated user (determined by the JWT in the Authorization header). Warning You cannot set points or foodWave to any value. Both these fields will default to 0 . If you want to edit these fields, call PUT /profile/ . Example request { \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" } Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 0 , \"timezone\" : \"Americas UTC+8\" , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 0 }","title":"POST /profile/"},{"location":"reference/services/Profile/#put-profile","text":"Updates the profile for the currently authenticated user (determined by the JWT in the Authorization header). Warning If the user is not a Staff or Admin, they cannot edit the points or foodWave field through this (for security reasons) Example request { \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" } Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 2 }","title":"PUT /profile/"},{"location":"reference/services/Profile/#delete-profile","text":"Danger Temporarily disabled since Apr 2nd, 2021. Deletes the profile for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 2 }","title":"DELETE /profile/"},{"location":"reference/services/Profile/#get-profileleaderboardlimit","text":"Note This is a public endpoint Returns a list of profiles sorted by points descending. If a limit parameter is provided, it will return the first limit profiles. Otherwise, it will return all of the profiles. Request requires no body. Example response { \"profiles\" : [ { \"id\" : \"profileid123456\" , \"points\" : 2021 , \"discord\" : \"patrick#1234\" }, { \"id\" : \"profileid123456\" , \"points\" : 2021 , \"discord\" : \"patrick#1234\" }, ] }","title":"GET /profile/leaderboard/?limit="},{"location":"reference/services/Profile/#get-profilesearchteamstatusvalueinterestsvaluevaluevaluelimitvalue","text":"Returns a list of profiles matching the filter conditions. teamStatus is a string matching the user's team status. Valid values for teamStatus are LOOKING_FOR_MEMBERS , LOOKING_FOR_TEAM , and NOT_LOOKING . interests is a comma-separated string representing the user's interests. i.e if the user's interests are [\"C++\", \"Machine Learning\"], you can filter on this by sending interests=\"C++,Machine Learning\" If a limit parameter is provided, it will return the first matching limit profiles. Otherwise, it will return all of the matched profiles. Warning Users with teamStatus NOT_LOOKING will be shown unless you filter against it. Make sure you consider this in respect to your use case and act accordingly! Request requires no body. Example response { \"profiles\" : [ { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , }, { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 2021 , }, ] }","title":"GET /profile/search/?teamStatus=value&amp;interests=value,value,value&amp;limit=value"},{"location":"reference/services/Profile/#post-profileeventcheckin","text":"Danger Internal use only! Validates the status of an event that the user is trying to check into. This is an internal endpoint hit during the checkin process (when the user posts a code to the event service). The response is a status string, and throws an error (except the case when the user is already checked in). In the case that the user has already been checked, status is set to \"Event already redeemed\" and a 200 status code is still used. Note Here, the \"id\" actually refers to the user id, not the profile id (hence github123456 instead of profileid123456 ) Example request { \"id\" : \"github123456\" , \"eventID\" : \"52fdfc072182654f163f5f0f9a621d72\" } Example response { \"status\" : \"Success\" }","title":"POST /profile/event/checkin/"},{"location":"reference/services/Profile/#post-profilepointsaward","text":"Danger Internal use only! Takes a struct with a profile and a certain number of points to increment their score by, and returns this profile upon completion. Note: here, the \"id\" actually refers to the user id, not the profile id (hence github123456 instead of profileid123456 ) Example request { \"id\" : \"github123456\" , \"points\" : 10 } Example response { \"id\" : \"profileid123456\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"points\" : 10 , \"avatarUrl\" : \"https://github.com/.../profile.jpg\" , \"discord\" : \"patrick#1234\" , \"foodWave\" : 2 }","title":"POST /profile/points/award/"},{"location":"reference/services/Profile/#get-profilefavorite","text":"Returns a list of profiles that the current user has favorited. Request requires no body. Example response { \"id\" : \"testid\" , \"profiles\" : [ \"testid3\" , ] }","title":"GET /profile/favorite/"},{"location":"reference/services/Profile/#post-profilefavorite","text":"Adds the specified profile to the current user's favorite list, and returns the updated list of favorite profiles. Example request { \"id\" : \"testid2\" } Example response { \"id\" : \"testid\" , \"profiles\" : [ \"testid3\" , \"testid2\" ] }","title":"POST /profile/favorite/"},{"location":"reference/services/Profile/#delete-profilefavorite","text":"Removes the specified profile from the current user's favorite list, and returns the updated list of favorite profiles. Example request { \"id\" : \"testid3\" } Example response { \"id\" : \"testid\" , \"profiles\" : [ \"testid2\" ] }","title":"DELETE /profile/favorite/"},{"location":"reference/services/Profile/#get-profiletierthreshold","text":"Returns the profile tier name to minimum point threshold mapping. Request requires no body. Example response [ { \"name\" : \"cookie\" , \"threshold\" : 0 }, { \"name\" : \"cupcake\" , \"threshold\" : 50 } ]","title":"GET /profile/tier/threshold/"},{"location":"reference/services/Project/","text":"Project GET /project/PROJECTID/ Returns the project with the id of PROJECTID . Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 } GET /project/ Returns a list of all projects. Request requires no body. Example response { \"projects\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 }, { \"id\" : \"52fdfcab71282654f163f5f0f9a621d72\" , \"name\" : \"Example Project 11\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Ann O. Nymous\" , \"Joe Bloggs\" ], \"room\" : \"Siebel 1310\" , \"tags\" : [ \"SYSTEMS\" ], \"number\" : 33 } ] } GET /project/filter/?key=value Returns all projects, filtered with the given key-value pairs. Request requires no body. Example response { \"projects\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 }, { \"id\" : \"52fdfcab71282654f163f5f0f9a621d72\" , \"name\" : \"Example Project 11\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Ann O. Nymous\" , \"Joe Bloggs\" ], \"room\" : \"Siebel 1310\" , \"tags\" : [ \"SYSTEMS\" ], \"number\" : 33 } ] } POST /project/ Creates a project with the requested fields. Returns the created project. Example request { \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 } DELETE /project/PROJECTID/ Endpoint to delete a project with name PROJECTID . Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 } PUT /project/ Updates the project with the id specified in the id field of the request. Returns the updated project. Example request { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 } GET /project/favorite/ Returns the project favorites for the current user. Request requires no body. Example response { \"id\" : \"github001\" , \"projects\" : [ \"52fdfc072182654f163f5f0f9a621d72\" , \"34edfc072182654f163f5f0f9a621d72\" ] } POST /project/favorite/ Adds the given project to the favorites for the current user. Example request { \"projectId\" : \"52fdfc072182654f163f5f0f9a621d72\" } Example response { \"id\" : \"github001\" , \"projects\" : [ \"52fdfc072182654f163f5f0f9a621d72\" , \"34dffc072182654f163f5f0f9a621d72\" ] } DELETE /project/favorite/ Removes the given project from the favorites for the current user. Example request { \"projectId\" : \"52fdfc072182654f163f5f0f9a621d72\" , } Example response { \"id\" : \"github001\" , \"projects\" : [ \"52fdfc072182654f163f5f0f9a621d72\" ] }","title":"Project"},{"location":"reference/services/Project/#project","text":"","title":"Project"},{"location":"reference/services/Project/#get-projectprojectid","text":"Returns the project with the id of PROJECTID . Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 }","title":"GET /project/PROJECTID/"},{"location":"reference/services/Project/#get-project","text":"Returns a list of all projects. Request requires no body. Example response { \"projects\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 }, { \"id\" : \"52fdfcab71282654f163f5f0f9a621d72\" , \"name\" : \"Example Project 11\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Ann O. Nymous\" , \"Joe Bloggs\" ], \"room\" : \"Siebel 1310\" , \"tags\" : [ \"SYSTEMS\" ], \"number\" : 33 } ] }","title":"GET /project/"},{"location":"reference/services/Project/#get-projectfilterkeyvalue","text":"Returns all projects, filtered with the given key-value pairs. Request requires no body. Example response { \"projects\" : [ { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 }, { \"id\" : \"52fdfcab71282654f163f5f0f9a621d72\" , \"name\" : \"Example Project 11\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Ann O. Nymous\" , \"Joe Bloggs\" ], \"room\" : \"Siebel 1310\" , \"tags\" : [ \"SYSTEMS\" ], \"number\" : 33 } ] }","title":"GET /project/filter/?key=value"},{"location":"reference/services/Project/#post-project","text":"Creates a project with the requested fields. Returns the created project. Example request { \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 }","title":"POST /project/"},{"location":"reference/services/Project/#delete-projectprojectid","text":"Endpoint to delete a project with name PROJECTID . Request requires no body. Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 }","title":"DELETE /project/PROJECTID/"},{"location":"reference/services/Project/#put-project","text":"Updates the project with the id specified in the id field of the request. Returns the updated project. Example request { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 } Example response { \"id\" : \"52fdfc072182654f163f5f0f9a621d72\" , \"name\" : \"Example Project 10\" , \"description\" : \"Example Project Description\" , \"mentors\" : [ \"Jane Doe\" , \"John Smith\" ], \"room\" : \"Siebel 1440\" , \"tags\" : [ \"BACKEND\" , \"FRONTEND\" ], \"number\" : 23 }","title":"PUT /project/"},{"location":"reference/services/Project/#get-projectfavorite","text":"Returns the project favorites for the current user. Request requires no body. Example response { \"id\" : \"github001\" , \"projects\" : [ \"52fdfc072182654f163f5f0f9a621d72\" , \"34edfc072182654f163f5f0f9a621d72\" ] }","title":"GET /project/favorite/"},{"location":"reference/services/Project/#post-projectfavorite","text":"Adds the given project to the favorites for the current user. Example request { \"projectId\" : \"52fdfc072182654f163f5f0f9a621d72\" } Example response { \"id\" : \"github001\" , \"projects\" : [ \"52fdfc072182654f163f5f0f9a621d72\" , \"34dffc072182654f163f5f0f9a621d72\" ] }","title":"POST /project/favorite/"},{"location":"reference/services/Project/#delete-projectfavorite","text":"Removes the given project from the favorites for the current user. Example request { \"projectId\" : \"52fdfc072182654f163f5f0f9a621d72\" , } Example response { \"id\" : \"github001\" , \"projects\" : [ \"52fdfc072182654f163f5f0f9a621d72\" ] }","title":"DELETE /project/favorite/"},{"location":"reference/services/RSVP/","text":"RSVP Warning The exact fields in the rsvp requests and responses will change based on the rsvp definitions provided in the API configuration file. Please consult them accordingly. GET /rsvp/USERID/ Returns the rsvp stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"isAttending\" : true } GET /rsvp/ Returns the rsvp stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"isAttending\" : true } POST /rsvp/ Creates an rsvp for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"isAttending\" : true } Example response { \"id\" : \"github0000001\" , \"isAttending\" : true } PUT /rsvp/ Updated the rsvp for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"isAttending\" : true } Example response { \"id\" : \"github0000001\" , \"isAttending\" : true }","title":"RSVP"},{"location":"reference/services/RSVP/#rsvp","text":"Warning The exact fields in the rsvp requests and responses will change based on the rsvp definitions provided in the API configuration file. Please consult them accordingly.","title":"RSVP"},{"location":"reference/services/RSVP/#get-rsvpuserid","text":"Returns the rsvp stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"isAttending\" : true }","title":"GET /rsvp/USERID/"},{"location":"reference/services/RSVP/#get-rsvp","text":"Returns the rsvp stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"isAttending\" : true }","title":"GET /rsvp/"},{"location":"reference/services/RSVP/#post-rsvp","text":"Creates an rsvp for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"isAttending\" : true } Example response { \"id\" : \"github0000001\" , \"isAttending\" : true }","title":"POST /rsvp/"},{"location":"reference/services/RSVP/#put-rsvp","text":"Updated the rsvp for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"isAttending\" : true } Example response { \"id\" : \"github0000001\" , \"isAttending\" : true }","title":"PUT /rsvp/"},{"location":"reference/services/Registration/","text":"Registration Warning The exact fields in the registration requests and responses will change based on the registration definitions provided in the API configuration file. Please consult them accordingly. config/production_config.json contains the most up-to-date version of REGISTRATION_DEFINITION , MENTOR_REGISTRATION_DEFINITION , and REGISTRATION_STAT_FIELDS . GET /registration/ Returns all the registrations stored for the currently authenticated user (determined by the JWT in the Authorization header). If registrations are not found for either Attendee or Mentor, that field is set to null. Request requires no body. Example response { \"attendee\" : { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }, \"mentor\" : { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } } GET /registration/USERID/ Returns all registrations stored for the user with the id USERID . If registrations are not found for either Attendee or Mentor, that field is set to null. Request requires no body. Example response { \"attendee\" : { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }, \"mentor\" : { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } } GET /registration/attendee/USERID/ Returns the user registration stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] } GET /registration/attendee/ Returns the user registration stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] } POST /registration/attendee/ Creates a registration for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] } Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] } PUT /registration/attendee/ Update the registration for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] } Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] } GET /registration/mentor/USERID/ Returns the mentor registration stored for the mentor with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } GET /registration/mentor/ Returns the mentor registration stored for the currently authenticated mentor (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } POST /registration/mentor/ Creates a registration for the currently authenticated mentor (determined by the JWT in the Authorization header) Example request { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } PUT /registration/mentor/ Updated the registration for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } GET /registration/attendee/list/?key=value Returns the user registrations, filtered with the given key-value pairs (optional) Request requires no body. Example response { \"registrations\" : [ { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }, { \"id\" : \"github0000002\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"gender\" : \"MALE\" , \"email\" : \"jdoe@gmail.com\" , \"race\" : \"MULTIRACIAL\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"MASTERS\" , \"graduationYear\" : 2023 , \"resumeFilename\" : \"doe-resume.pdf\" , \"whyHack\" : \"I also want to learn and program. Hack yeah!\" , \"programmingYears\" : 6 , \"programmingAbility\" : 8 , \"interests\" : [ \"Company Q&As and Networking events\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [] } ] } GET /registration/mentor/list/?key=value Returns the mentor registrations, filtered with the given key-value pairs (optional) Request requires no body. Example response { \"registrations\" : [ { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" }, { \"id\" : \"github0000002\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"email\" : \"jdoe@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JDoe\" , \"linkedin\" : \"john-doe\" } ] }","title":"Registration"},{"location":"reference/services/Registration/#registration","text":"Warning The exact fields in the registration requests and responses will change based on the registration definitions provided in the API configuration file. Please consult them accordingly. config/production_config.json contains the most up-to-date version of REGISTRATION_DEFINITION , MENTOR_REGISTRATION_DEFINITION , and REGISTRATION_STAT_FIELDS .","title":"Registration"},{"location":"reference/services/Registration/#get-registration","text":"Returns all the registrations stored for the currently authenticated user (determined by the JWT in the Authorization header). If registrations are not found for either Attendee or Mentor, that field is set to null. Request requires no body. Example response { \"attendee\" : { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }, \"mentor\" : { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } }","title":"GET /registration/"},{"location":"reference/services/Registration/#get-registrationuserid","text":"Returns all registrations stored for the user with the id USERID . If registrations are not found for either Attendee or Mentor, that field is set to null. Request requires no body. Example response { \"attendee\" : { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }, \"mentor\" : { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } }","title":"GET /registration/USERID/"},{"location":"reference/services/Registration/#get-registrationattendeeuserid","text":"Returns the user registration stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }","title":"GET /registration/attendee/USERID/"},{"location":"reference/services/Registration/#get-registrationattendee","text":"Returns the user registration stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }","title":"GET /registration/attendee/"},{"location":"reference/services/Registration/#post-registrationattendee","text":"Creates a registration for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] } Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }","title":"POST /registration/attendee/"},{"location":"reference/services/Registration/#put-registrationattendee","text":"Update the registration for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] } Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }","title":"PUT /registration/attendee/"},{"location":"reference/services/Registration/#get-registrationmentoruserid","text":"Returns the mentor registration stored for the mentor with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" }","title":"GET /registration/mentor/USERID/"},{"location":"reference/services/Registration/#get-registrationmentor","text":"Returns the mentor registration stored for the currently authenticated mentor (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" }","title":"GET /registration/mentor/"},{"location":"reference/services/Registration/#post-registrationmentor","text":"Creates a registration for the currently authenticated mentor (determined by the JWT in the Authorization header) Example request { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" }","title":"POST /registration/mentor/"},{"location":"reference/services/Registration/#put-registrationmentor","text":"Updated the registration for the currently authenticated user (determined by the JWT in the Authorization header). Example request { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" } Example response { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" }","title":"PUT /registration/mentor/"},{"location":"reference/services/Registration/#get-registrationattendeelistkeyvalue","text":"Returns the user registrations, filtered with the given key-value pairs (optional) Request requires no body. Example response { \"registrations\" : [ { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"gender\" : \"MALE\" , \"email\" : \"john@gmail.com\" , \"race\" : \"WHITE\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"BACHELORS\" , \"graduationYear\" : 2025 , \"resumeFilename\" : \"smith-resume.pdf\" , \"whyHack\" : \"I want to learn and program. Hack yeah!\" , \"programmingYears\" : 2 , \"programmingAbility\" : 5 , \"interests\" : [ \"Company Q&As and Networking events\" , \"Meeting new people\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [ \"Lactose-Intolerant\" ] }, { \"id\" : \"github0000002\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"gender\" : \"MALE\" , \"email\" : \"jdoe@gmail.com\" , \"race\" : \"MULTIRACIAL\" , \"selfTransport\" : \"YES\" , \"chicagoPurdueTransport\" : \"N/A\" , \"location\" : \"Champaign, IL\" , \"school\" : \"University of Illinois at Urbana-Champaign\" , \"major\" : \"Computer Science\" , \"degreePursued\" : \"MASTERS\" , \"graduationYear\" : 2023 , \"resumeFilename\" : \"doe-resume.pdf\" , \"whyHack\" : \"I also want to learn and program. Hack yeah!\" , \"programmingYears\" : 6 , \"programmingAbility\" : 8 , \"interests\" : [ \"Company Q&As and Networking events\" ], \"outreachSurvey\" : [ \"CS Department Email\" ], \"dietary\" : [] } ] }","title":"GET /registration/attendee/list/?key=value"},{"location":"reference/services/Registration/#get-registrationmentorlistkeyvalue","text":"Returns the mentor registrations, filtered with the given key-value pairs (optional) Request requires no body. Example response { \"registrations\" : [ { \"id\" : \"github0000001\" , \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"email\" : \"john@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JSmith\" , \"linkedin\" : \"john-smith\" }, { \"id\" : \"github0000002\" , \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"email\" : \"jdoe@gmail.com\" , \"shirtSize\" : \"M\" , \"github\" : \"JDoe\" , \"linkedin\" : \"john-doe\" } ] }","title":"GET /registration/mentor/list/?key=value"},{"location":"reference/services/Statistics/","text":"Event GET /stat/ Returns statistics for all services. Request requires no body. Example response { \"registration\" : { \"school\" : { \"University of Illinois Urbana-Champaign\" : 5 , \"Northwestern University\" : 3 }, \"major\" : { \"Computer Science\" : 4 , \"Computer Engineering\" : 4 } }, \"event\" : { \"OpeningCeremony\" : 8 , \"Breakfast\" : 6 } } GET /stat/SERVICENAME/ Returns statistics for the service with the name SERVICENAME . Request requires no body. Example response { \"OpeningCeremony\" : 8 , \"Breakfast\" : 6 }","title":"Statistics"},{"location":"reference/services/Statistics/#event","text":"","title":"Event"},{"location":"reference/services/Statistics/#get-stat","text":"Returns statistics for all services. Request requires no body. Example response { \"registration\" : { \"school\" : { \"University of Illinois Urbana-Champaign\" : 5 , \"Northwestern University\" : 3 }, \"major\" : { \"Computer Science\" : 4 , \"Computer Engineering\" : 4 } }, \"event\" : { \"OpeningCeremony\" : 8 , \"Breakfast\" : 6 } }","title":"GET /stat/"},{"location":"reference/services/Statistics/#get-statservicename","text":"Returns statistics for the service with the name SERVICENAME . Request requires no body. Example response { \"OpeningCeremony\" : 8 , \"Breakfast\" : 6 }","title":"GET /stat/SERVICENAME/"},{"location":"reference/services/Upload/","text":"Upload GET /upload/resume/USERID/ Returns the resume stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"resume\" : \"https://bucket.s3.amazonaws.com/resume.pdf\" } GET /upload/resume/ Returns the resume stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"resume\" : \"https://bucket.s3.amazonaws.com/resume.pdf\" } GET /upload/resume/upload/ Returns the S3 link for resume uploading for the currently authenticated user (determined by the JWT in the Authorization header). The user's resume can be PUT to this link. Request requires no body. Example response { \"id\" : \"github0000001\" , \"resume\" : \"https://bucket.s3.amazonaws.com/resume.pdf\" } GET /upload/photo/USERID/ Returns the photo stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"photo\" : \"https://bucket.s3.amazonaws.com/photo\" } GET /upload/photo/ Returns the photo stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"photo\" : \"https://bucket.s3.amazonaws.com/photo\" } GET /upload/photo/upload/ Returns the S3 link for photo uploading for the currently authenticated user (determined by the JWT in the Authorization header). The user's photo can be PUT to this link. Request requires no body. Example response { \"id\" : \"github0000001\" , \"photo\" : \"https://bucket.s3.amazonaws.com/photo\" } GET /upload/blobstore/ID/ Returns the blob stored with the id ID . Request requires no body. Example response { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } } POST /upload/blobstore/ Creates and stores a blob with the specified id and data . data can be a single json field or an json object. Example request { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } } Example response { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } } PUT /upload/blobstore/ Updates the blob with the specified id . data can be a single json field or an json object. Example request { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } } Example response { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } } DELETE /upload/blobstore/ID/ Deletes the blob with the specified id . Example request { \"id\" : \"exampleblob\" , } Example response { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } }","title":"Upload"},{"location":"reference/services/Upload/#upload","text":"","title":"Upload"},{"location":"reference/services/Upload/#get-uploadresumeuserid","text":"Returns the resume stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"resume\" : \"https://bucket.s3.amazonaws.com/resume.pdf\" }","title":"GET /upload/resume/USERID/"},{"location":"reference/services/Upload/#get-uploadresume","text":"Returns the resume stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"resume\" : \"https://bucket.s3.amazonaws.com/resume.pdf\" }","title":"GET /upload/resume/"},{"location":"reference/services/Upload/#get-uploadresumeupload","text":"Returns the S3 link for resume uploading for the currently authenticated user (determined by the JWT in the Authorization header). The user's resume can be PUT to this link. Request requires no body. Example response { \"id\" : \"github0000001\" , \"resume\" : \"https://bucket.s3.amazonaws.com/resume.pdf\" }","title":"GET /upload/resume/upload/"},{"location":"reference/services/Upload/#get-uploadphotouserid","text":"Returns the photo stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github0000001\" , \"photo\" : \"https://bucket.s3.amazonaws.com/photo\" }","title":"GET /upload/photo/USERID/"},{"location":"reference/services/Upload/#get-uploadphoto","text":"Returns the photo stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github0000001\" , \"photo\" : \"https://bucket.s3.amazonaws.com/photo\" }","title":"GET /upload/photo/"},{"location":"reference/services/Upload/#get-uploadphotoupload","text":"Returns the S3 link for photo uploading for the currently authenticated user (determined by the JWT in the Authorization header). The user's photo can be PUT to this link. Request requires no body. Example response { \"id\" : \"github0000001\" , \"photo\" : \"https://bucket.s3.amazonaws.com/photo\" }","title":"GET /upload/photo/upload/"},{"location":"reference/services/Upload/#get-uploadblobstoreid","text":"Returns the blob stored with the id ID . Request requires no body. Example response { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } }","title":"GET /upload/blobstore/ID/"},{"location":"reference/services/Upload/#post-uploadblobstore","text":"Creates and stores a blob with the specified id and data . data can be a single json field or an json object. Example request { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } } Example response { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } }","title":"POST /upload/blobstore/"},{"location":"reference/services/Upload/#put-uploadblobstore","text":"Updates the blob with the specified id . data can be a single json field or an json object. Example request { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } } Example response { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } }","title":"PUT /upload/blobstore/"},{"location":"reference/services/Upload/#delete-uploadblobstoreid","text":"Deletes the blob with the specified id . Example request { \"id\" : \"exampleblob\" , } Example response { \"id\" : \"exampleblob\" , \"data\" : { \"thing1\" : \"hi\" , \"thing2\" : \"hello\" } }","title":"DELETE /upload/blobstore/ID/"},{"location":"reference/services/User/","text":"Users GET /user/USERID/ Returns the basic user information stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github09829234\" , \"username\" : \"ExampleUsername\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"examplemail@gmail.com\" } GET /user/ Returns the basic user information stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github09829234\" , \"username\" : \"ExampleUsername\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"examplemail@gmail.com\" } POST /user/ Sets the basic user information for the user as specified in the id field of the request. The information recorded in the database is returned in the response. Example request { \"id\" : \"github000001\" , \"username\" : \"test\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"test@gmail.com\" } Example response { \"id\" : \"github000001\" , \"username\" : \"test\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"test@gmail.com\" } GET /user/filter/?key=value Returns the basic user information, filtered with the given key-value pairs. To paginate the response, provide a parameter \"p\" with the page number you are requesting, as well as a parameter \"limit\" with the desired number of Users per page. If the pagination request exceeds the length of the available Users, it will be truncated. For example, the following request: /user/filter/?key=value&p=1&limit=5 will return the first 5 Users (index 0 through 4). To sort the users, provide a comma-separated \"sortby\" parameter. For example, the following request: /user/filter/?key=value&sortby=FirstName,LastName will return a list of filtered users sorted by first name, using the last name as a tie breaker. To reverse the sort, add a minus (-) to the desired sort field. For example, FirstName would become -FirstName . Request requires no body. Example response { \"users\" : [ { \"id\" : \"github09829234\" , \"username\" : \"ExampleUsername\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"examplemail@gmail.com\" }, { \"id\" : \"github09829235\" , \"username\" : \"ExampleUsername2\" , \"firstName\" : \"ExampleFirstName2\" , \"lastName\" : \"ExampleLastName2\" , \"email\" : \"examplemail2@gmail.com\" } ] } GET /user/qr/ Get the string to be embedded in the current user's QR code. The QR code string will contain information stored in the form of a URI. Warning The URI wll contain a JWT that will expire in 20 seconds after the request was received. If you need a new user token, poll this endpoint again and it will give a fresh token. Since each token expires after 20 seconds, it is recommended that you poll every 15 seconds to allow for any last second user QR scans to succeed. Request requires no body. Example response { \"id\" : \"github0000001\" , \"qrInfo\" : \"hackillinois://user?userToken=mWZfc9b4zLEzyqqqFmSbvFcEXuY2CEjiAqWhbrVdzcc\" } GET /user/qr/{id}/ Get the string to be embedded in the specified user's QR code. The QR code string will contain information stored in the form of a URI. Warning See GET /user/qr/ for more information the user token's lifetime that is embedded into the URI. If you need a new user token, poll this endpoint again and it will give a fresh token. Request requires no body. Example response { \"id\" : \"github0000001\" , \"qrInfo\" : \"hackillinois://user?userToken=mWZfc9b4zLEzyqqqFmSbvFcEXuY2CEjiAqWhbrVdzcc\" }","title":"User"},{"location":"reference/services/User/#users","text":"","title":"Users"},{"location":"reference/services/User/#get-useruserid","text":"Returns the basic user information stored for the user with the id USERID . Request requires no body. Example response { \"id\" : \"github09829234\" , \"username\" : \"ExampleUsername\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"examplemail@gmail.com\" }","title":"GET /user/USERID/"},{"location":"reference/services/User/#get-user","text":"Returns the basic user information stored for the currently authenticated user (determined by the JWT in the Authorization header). Request requires no body. Example response { \"id\" : \"github09829234\" , \"username\" : \"ExampleUsername\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"examplemail@gmail.com\" }","title":"GET /user/"},{"location":"reference/services/User/#post-user","text":"Sets the basic user information for the user as specified in the id field of the request. The information recorded in the database is returned in the response. Example request { \"id\" : \"github000001\" , \"username\" : \"test\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"test@gmail.com\" } Example response { \"id\" : \"github000001\" , \"username\" : \"test\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"test@gmail.com\" }","title":"POST /user/"},{"location":"reference/services/User/#get-userfilterkeyvalue","text":"Returns the basic user information, filtered with the given key-value pairs. To paginate the response, provide a parameter \"p\" with the page number you are requesting, as well as a parameter \"limit\" with the desired number of Users per page. If the pagination request exceeds the length of the available Users, it will be truncated. For example, the following request: /user/filter/?key=value&p=1&limit=5 will return the first 5 Users (index 0 through 4). To sort the users, provide a comma-separated \"sortby\" parameter. For example, the following request: /user/filter/?key=value&sortby=FirstName,LastName will return a list of filtered users sorted by first name, using the last name as a tie breaker. To reverse the sort, add a minus (-) to the desired sort field. For example, FirstName would become -FirstName . Request requires no body. Example response { \"users\" : [ { \"id\" : \"github09829234\" , \"username\" : \"ExampleUsername\" , \"firstName\" : \"ExampleFirstName\" , \"lastName\" : \"ExampleLastName\" , \"email\" : \"examplemail@gmail.com\" }, { \"id\" : \"github09829235\" , \"username\" : \"ExampleUsername2\" , \"firstName\" : \"ExampleFirstName2\" , \"lastName\" : \"ExampleLastName2\" , \"email\" : \"examplemail2@gmail.com\" } ] }","title":"GET /user/filter/?key=value"},{"location":"reference/services/User/#get-userqr","text":"Get the string to be embedded in the current user's QR code. The QR code string will contain information stored in the form of a URI. Warning The URI wll contain a JWT that will expire in 20 seconds after the request was received. If you need a new user token, poll this endpoint again and it will give a fresh token. Since each token expires after 20 seconds, it is recommended that you poll every 15 seconds to allow for any last second user QR scans to succeed. Request requires no body. Example response { \"id\" : \"github0000001\" , \"qrInfo\" : \"hackillinois://user?userToken=mWZfc9b4zLEzyqqqFmSbvFcEXuY2CEjiAqWhbrVdzcc\" }","title":"GET /user/qr/"},{"location":"reference/services/User/#get-userqrid","text":"Get the string to be embedded in the specified user's QR code. The QR code string will contain information stored in the form of a URI. Warning See GET /user/qr/ for more information the user token's lifetime that is embedded into the URI. If you need a new user token, poll this endpoint again and it will give a fresh token. Request requires no body. Example response { \"id\" : \"github0000001\" , \"qrInfo\" : \"hackillinois://user?userToken=mWZfc9b4zLEzyqqqFmSbvFcEXuY2CEjiAqWhbrVdzcc\" }","title":"GET /user/qr/{id}/"}]}